{"version":3,"sources":["components/Digit/index.js","components/SelectButton/index.js","components/Clock/useClockSettings.js","components/Clock/index.js","App.js","serviceWorker.js","index.js"],"names":["Digit","props","className","type","value","disabled","SelectButton","buttons","choices","map","choice","key","selected","onClick","onSelect","useClockSettings","initialSettings","useState","settings","setSettings","handleTimeFormatChange","format","TIME_FORMATS","Object","freeze","TWELVE","TWENTY_FOUR","getTimeObject","hourFormat","date","moment","Date","hours","minutes","seconds","meridiem","ClockSettings","values","TimeUnit","Clock","clockSettings","time","setTime","useEffect","timerId","setInterval","clearInterval","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d835508b.chunk.js","sourcesContent":["import React from 'react';\nimport './Digit.scss';\n\nfunction Digit(props) {\n  return (\n    <input className='digit' type='text' value={props.value} disabled={props.disabled} />\n  );\n}\n\nexport default Digit;\n","import React from 'react';\nimport './SelectButton.scss';\n\n\nfunction SelectButton(props) {\n  const buttons = props.choices.map(choice => (\n    <button\n      key={choice}\n      className={`${choice === props.selected ? 'selected': ''}`}\n      onClick={() => props.onSelect(choice)}>{choice}</button>\n  ));\n  return <div className='select-button'>{buttons}</div>;\n}\n\nexport default SelectButton;\n","import { useState } from \"react\";\n\nfunction useClockSettings(initialSettings) {\n  const [settings, setSettings] = useState(initialSettings);\n\n  function handleTimeFormatChange(format) {\n    setSettings({...settings, format});\n  }\n\n  return {\n    settings,\n    handleTimeFormatChange,\n  }\n}\n\nexport default useClockSettings;\n","import React, { useState, useEffect } from 'react';\nimport Digit from '../Digit';\nimport SelectButton from '../SelectButton';\nimport moment from 'moment';\nimport useClockSettings from './useClockSettings';\nimport './Clock.scss';\n\n\nconst TIME_FORMATS = Object.freeze({\n  TWELVE: 12,\n  TWENTY_FOUR: 24,\n});\n\nfunction getTimeObject(format) {\n  const hourFormat = format === TIME_FORMATS.TWELVE ? 'hh' : 'HH';\n  const date = moment(new Date());\n  const hours = date.format(hourFormat);\n  const minutes = date.format('mm');\n  const seconds = date.format('ss');\n  const meridiem = date.format('A');\n  const time = { hours, minutes, seconds, meridiem };\n  return time;\n}\n\nfunction ClockSettings(props) {\n  return (\n    <div className='clock-settings'>\n      <SelectButton\n        choices={Object.values(TIME_FORMATS)}\n        onSelect={props.handleTimeFormatChange}\n        selected={props.settings.format} />\n    </div>\n  );\n}\n\nfunction TimeUnit(props) {\n  return (\n    <div className='time-unit'>\n      <Digit value={props.value[0]} disabled={props.disabled} />\n      <Digit value={props.value[1]} disabled={props.disabled} />\n    </div>\n  );\n}\n\nfunction Clock(props) {\n  const clockSettings = useClockSettings({ format: TIME_FORMATS.TWELVE });\n  const [time, setTime] = useState(getTimeObject(clockSettings.settings.format));\n  useEffect(() => {\n    setTime(getTimeObject(clockSettings.settings.format));\n    const timerId = setInterval(() => {\n      setTime(getTimeObject(clockSettings.settings.format));\n    }, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n  }, [clockSettings.settings.format]);\n\n  return (\n    <div className='clock'>\n      <ClockSettings {...clockSettings} />\n      <div className='time'>\n        <TimeUnit disabled={true} value={time.hours} />\n        <TimeUnit disabled={true} value={time.minutes} />\n        <TimeUnit disabled={true} value={time.seconds} />\n        {clockSettings.settings.format === TIME_FORMATS.TWELVE &&\n          <div className='meridiem'><span>{time.meridiem}</span></div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Clock;\n","import React from 'react';\nimport Clock from './components/Clock';\nimport './sass/main.scss';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <div className='tool'>\n        <Clock />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\nregister();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}